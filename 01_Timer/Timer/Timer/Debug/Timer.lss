
Timer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000140  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000030  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000d8  00000000  00000000  000001a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000a8  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000000d6  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000054  00000000  00000000  000003f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000012a  00000000  00000000  0000044c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    0000003c  00000000  00000000  00000576  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  000005b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 64 00 	jmp	0xc8	; 0xc8 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_9>:
		}
    }
}

ISR(TIMER1_OVF_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
	Event = 1;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 60 00 	sts	0x0060, r24
}
  8e:	8f 91       	pop	r24
  90:	0f 90       	pop	r0
  92:	0f be       	out	0x3f, r0	; 63
  94:	0f 90       	pop	r0
  96:	1f 90       	pop	r1
  98:	18 95       	reti

0000009a <task>:

void task(void)
{
	//ignition
	PORTD ^= (1<<3);
  9a:	92 b3       	in	r25, 0x12	; 18
  9c:	88 e0       	ldi	r24, 0x08	; 8
  9e:	89 27       	eor	r24, r25
  a0:	82 bb       	out	0x12, r24	; 18
  a2:	08 95       	ret

000000a4 <main>:


int main(void)
{
	//init
	DDRD |= (1<<3);
  a4:	8b 9a       	sbi	0x11, 3	; 17
	TIMSK |=(1<<TOIE1);
  a6:	89 b7       	in	r24, 0x39	; 57
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	89 bf       	out	0x39, r24	; 57
	TCCR1B |=(1<<CS11);
  ac:	8e b5       	in	r24, 0x2e	; 46
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	8e bd       	out	0x2e, r24	; 46
	sei();
  b2:	78 94       	sei
  b4:	04 c0       	rjmp	.+8      	; 0xbe <main+0x1a>
    while(1)
    {
        while(Event)
		{
			task();
  b6:	0e 94 4d 00 	call	0x9a	; 0x9a <task>
			Event = 0;
  ba:	10 92 60 00 	sts	0x0060, r1
	TIMSK |=(1<<TOIE1);
	TCCR1B |=(1<<CS11);
	sei();
    while(1)
    {
        while(Event)
  be:	80 91 60 00 	lds	r24, 0x0060
  c2:	81 11       	cpse	r24, r1
  c4:	f8 cf       	rjmp	.-16     	; 0xb6 <main+0x12>
  c6:	fb cf       	rjmp	.-10     	; 0xbe <main+0x1a>

000000c8 <_exit>:
  c8:	f8 94       	cli

000000ca <__stop_program>:
  ca:	ff cf       	rjmp	.-2      	; 0xca <__stop_program>
