
Seven_Segment_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ac  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  00000100  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000048  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000195  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000166  00000000  00000000  0000030d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000172  00000000  00000000  00000473  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000058  00000000  00000000  000005e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a7  00000000  00000000  00000640  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000021  00000000  00000000  000007e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000028  00000000  00000000  00000808  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  64:	0c 94 54 00 	jmp	0xa8	; 0xa8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <Init_SSEG>:
//this .c file Has its .h file
#include "SSEG_HW_Layer.h"

void Init_SSEG(void)
{
    Init_SSEG_Pins;
  6c:	d4 9a       	sbi	0x1a, 4	; 26
  6e:	d5 9a       	sbi	0x1a, 5	; 26
  70:	87 b3       	in	r24, 0x17	; 23
  72:	80 6f       	ori	r24, 0xF0	; 240
  74:	87 bb       	out	0x17, r24	; 23
  76:	08 95       	ret

00000078 <SSEG_Run>:
}

void SSEG_Run (pos Position, unsigned char Num)
{
    SSEG_Print(Num);
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	20 e1       	ldi	r18, 0x10	; 16
  7c:	62 9f       	mul	r22, r18
  7e:	b0 01       	movw	r22, r0
  80:	11 24       	eor	r1, r1
  82:	69 2b       	or	r22, r25
  84:	68 bb       	out	0x18, r22	; 24

    if (Position == Left)
  86:	81 11       	cpse	r24, r1
  88:	03 c0       	rjmp	.+6      	; 0x90 <SSEG_Run+0x18>
	{
        Enable_Left_SSEG;
  8a:	dd 98       	cbi	0x1b, 5	; 27
  8c:	dc 9a       	sbi	0x1b, 4	; 27
  8e:	08 95       	ret
	}
    else
	{
        Enable_Right_SSEG;
  90:	dc 98       	cbi	0x1b, 4	; 27
  92:	dd 9a       	sbi	0x1b, 5	; 27
  94:	08 95       	ret

00000096 <main>:
//This is the Application Layer >> Connected with >> Hardwares Layer.
#include "Hard_Ware_Layer\SSEG_HW_Layer.h"

int main(void)
{
	Init_SSEG();
  96:	0e 94 36 00 	call	0x6c	; 0x6c <Init_SSEG>
	SSEG_Run (Left, 4);
  9a:	64 e0       	ldi	r22, 0x04	; 4
  9c:	80 e0       	ldi	r24, 0x00	; 0
  9e:	0e 94 3c 00 	call	0x78	; 0x78 <SSEG_Run>
}
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	08 95       	ret

000000a8 <_exit>:
  a8:	f8 94       	cli

000000aa <__stop_program>:
  aa:	ff cf       	rjmp	.-2      	; 0xaa <__stop_program>
