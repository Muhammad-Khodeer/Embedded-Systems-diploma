
Seven_Segment_Driver_Two.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000110  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  00000184  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000070  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000022c  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000019f  00000000  00000000  00000450  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000002b0  00000000  00000000  000005ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a0  00000000  00000000  000008a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000211  00000000  00000000  00000940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000b3  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000040  00000000  00000000  00000c04  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 86 00 	jmp	0x10c	; 0x10c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:
/**This is The Application Layer Connected with the hardware layer **/
#include "SSEG_HW_Layer/SSEG_HW_Layer.h"

int main(void)
{
    Init_SSEG();
  7c:	0e 94 47 00 	call	0x8e	; 0x8e <Init_SSEG>
	while(1)
	{                     //Enter any Number Between [00:99] >> 62 as (6,2)
		Print_SSEG(6,2);  //Note: [This work with FCPU 8 MHZ]
  80:	62 e0       	ldi	r22, 0x02	; 2
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	86 e0       	ldi	r24, 0x06	; 6
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 4f 00 	call	0x9e	; 0x9e <Print_SSEG>
  8c:	f9 cf       	rjmp	.-14     	; 0x80 <main+0x4>

0000008e <Init_SSEG>:
#include "SSEG_MCAL_Layer/SSEG_MCAL_Layer.h"
extern volatile unsigned char Event; //Note : [External variable come from MCAL Layer] 

void Init_SSEG(void)
{
	Init_SSEG_Pins;
  8e:	d4 9a       	sbi	0x1a, 4	; 26
  90:	d5 9a       	sbi	0x1a, 5	; 26
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6f       	ori	r24, 0xF0	; 240
  96:	87 bb       	out	0x17, r24	; 23
	Init_Digits_show();
  98:	0e 94 63 00 	call	0xc6	; 0xc6 <Init_Digits_show>
  9c:	08 95       	ret

0000009e <Print_SSEG>:
}

void Print_SSEG(int DiditL, int DigitR)//You can Enter any number Between [00 : 99].
{
	if(Event_Left)
  9e:	90 91 60 00 	lds	r25, 0x0060
  a2:	91 11       	cpse	r25, r1
  a4:	06 c0       	rjmp	.+12     	; 0xb2 <Print_SSEG+0x14>
	{	
		Desiable_Right_SSEG;
  a6:	dc 9a       	sbi	0x1b, 4	; 27
		SSEG_Print(DiditL);
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	88 bb       	out	0x18, r24	; 24
		Enable_Left_SSEG;
  ae:	dd 98       	cbi	0x1b, 5	; 27
  b0:	08 95       	ret
	}
	else if (Event_Right)
  b2:	80 91 60 00 	lds	r24, 0x0060
  b6:	81 30       	cpi	r24, 0x01	; 1
  b8:	29 f4       	brne	.+10     	; 0xc4 <Print_SSEG+0x26>
    {		
		Desiable_Left_SSEG;
  ba:	dd 9a       	sbi	0x1b, 5	; 27
		SSEG_Print(DigitR);
  bc:	62 95       	swap	r22
  be:	60 7f       	andi	r22, 0xF0	; 240
  c0:	68 bb       	out	0x18, r22	; 24
		Enable_Right_SSEG;
  c2:	dc 98       	cbi	0x1b, 4	; 27
  c4:	08 95       	ret

000000c6 <Init_Digits_show>:
volatile unsigned char Event;


void Init_Digits_show(void)
{
	Enable_Global_initerrupt;
  c6:	78 94       	sei
	Enable_OverFlow_Timer1;
  c8:	89 b7       	in	r24, 0x39	; 57
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	89 bf       	out	0x39, r24	; 57
	Start_With_Speed_Type1;
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	81 60       	ori	r24, 0x01	; 1
  d2:	8e bd       	out	0x2e, r24	; 46
  d4:	8e b5       	in	r24, 0x2e	; 46
  d6:	8d 7f       	andi	r24, 0xFD	; 253
  d8:	8e bd       	out	0x2e, r24	; 46
  da:	8e b5       	in	r24, 0x2e	; 46
  dc:	8b 7f       	andi	r24, 0xFB	; 251
  de:	8e bd       	out	0x2e, r24	; 46
  e0:	08 95       	ret

000000e2 <__vector_9>:
}

ISR(TIMER1_OVF_vect)
{	
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	8f 93       	push	r24
  ee:	9f 93       	push	r25
	Event = !Event;
  f0:	90 91 60 00 	lds	r25, 0x0060
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	91 11       	cpse	r25, r1
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	80 93 60 00 	sts	0x0060, r24
  fe:	9f 91       	pop	r25
 100:	8f 91       	pop	r24
 102:	0f 90       	pop	r0
 104:	0f be       	out	0x3f, r0	; 63
 106:	0f 90       	pop	r0
 108:	1f 90       	pop	r1
 10a:	18 95       	reti

0000010c <_exit>:
 10c:	f8 94       	cli

0000010e <__stop_program>:
 10e:	ff cf       	rjmp	.-2      	; 0x10e <__stop_program>
